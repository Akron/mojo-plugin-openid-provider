#!/usr/bin/env perl
# vim:set tabstop=2 shiftwidth=2 softtabstop=2 expandtab: 

use lib 'lib';

use Mojolicious::Lite;
use Data::Dumper;
use Mojo::Parameters;
use Mojo::Util qw/b64_encode/;
use Digest::SHA qw(sha1 sha1_hex sha1_base64 hmac_sha1 );
use OpenID;
use Crypt::DH;
use Math::BigInt;
use MIME::Base64;

my $config = plugin 'json_config';
app->secret($config->{'secret'});
delete $config->{'secret'};


# Documentation browser under "/perldoc" (this plugin requires Perl 5.10)

app->hook(before_dispatch => sub {
  my $self = shift;
  $self->req->url->base->scheme('http') if $self->req->headers->header('X-Forwarded-Protocol') eq 'http';
  $self->req->url->base->scheme('https') if $self->req->headers->header('X-Forwarded-Protocol') eq 'https';
});

any [qw/post get/] => '/openid' => sub {
  my $self    = shift;
  my $mode    = $self->param("openid.mode") || '';
  my $ns      = $self->param("openid.ns")   || '';
  my $version = 0;

  $self->app->log->debug("-------------------------------------------------");
  $self->app->log->debug(sprintf("Mode: %s", $mode));
  $self->app->log->debug(sprintf("NS: %s", $ns));
  $self->app->log->debug("Current URI: ".$self->req->url);
  $self->app->log->debug("Params: ".Dumper($self->req->params->to_hash));

  if(!$mode)
  {
    $self->render("endpoint");
	  return;
  }

  if(($ns eq "http://specs.openid.net/auth/2.0"))
  {
    $version = 2;
  }
  elsif(($ns eq "http://openid.net/signon/1.1") || ($ns eq "http://openid.net/signon/1.0") || !$ns)
  {
    $version = 1;
  }
  else
  {
    $self->render_text("I don't understand that!");
    $self->res->code(400);
    return;
  }

  $self->app->log->debug(sprintf("Version: %s", $version));
  $self->app->log->debug(sprintf("Method: %s", $self->req->method));

  if($mode eq "associate" && ($self->req->method eq "POST"))
  {
    my $now = time();
    my %prop;
    my $assoc_type    = $self->param("openid.assoc_type")     || '';
    my $session_type  = $self->param("openid.session_type")   || '';
    $self->app->log->debug(sprintf("Assoc Type: %s", $assoc_type));
    $self->app->log->debug(sprintf("Session Type: %s", $session_type));

    if(!(($assoc_type eq 'HMAC-SHA1') || ($assoc_type eq 'HMAC-SHA256')))
    {
      $self->response_associate_type_error();
      return;
    }

    if(!(($session_type eq 'DH-SHA1') || ($session_type eq 'DH-SHA256')  || (($session_type eq 'no-encryption') && $self->req->base->scheme eq 'https')))
    {
      $self->response_associate_type_error();
      return;
    }

    my $expires = 3600;

    # make absolute form of expires
    my $exp_abs = $expires > 1000000000 ? $expires : $expires + $now;

    # make relative form of expires
    my $exp_rel = $exp_abs - $now;
    my $assoc_type = "HMAC-SHA1";
    $prop{'ns'}   = $self->param('openid.ns') if $self->param('openid.ns');
    $prop{'assoc_type'}   = $assoc_type;
    $prop{'assoc_handle'} = "assoc_handle";
    $prop{'expires_in'}   = $exp_rel;


    if ($self->param("openid.session_type") eq "DH-SHA1") {

        my $dh   = Crypt::DH->new;
        my $p    = OpenID::_arg2bi($self->param("openid.dh_modulus")) || Math::BigInt->new("155172898181473697471232257763715539915724801966915404479707795314057629378541917580651227423698188993727816152646631438561595825688188889951272158842675419950341258706556549803580104870537681476726513255747040765857479291291572334510643245094715007229621094194349783925984760375594985848253359305585439638443");
        my $g    = OpenID::_arg2bi($self->param("openid.dh_gen"))     || Math::BigInt->new("2");
        my $cpub = OpenID::_arg2bi($self->param("openid.dh_consumer_public"));

        return $self->_error_page("invalid dh params p=$p, g=$g, cpub=$cpub") unless $p > 10 && $g > 1 && $cpub;

        $dh->p($p);
        $dh->g($g);
        $dh->generate_keys;

        my $dh_sec = $dh->compute_secret($cpub);

        $prop{'dh_server_public'} = OpenID::_bi2arg($dh->pub_key);
        $prop{'session_type'}     = "DH-SHA1";
        $prop{'enc_mac_key'}      = OpenID::_b64("assoc_handle" ^ sha1(OpenID::_bi2bytes($dh_sec)));

    } else {
        $prop{'mac_key'} = OpenID::_b64("assoc_handle");
    }

    my $body = "";
    foreach (sort keys %prop) {
        $body .= "$_:".$prop{$_}."\n";
    }

    warn $body;
    $self->render_text($body);    
    return;
  }

  if($mode eq "check_authentication")
  {
#          my @sign = qw(mode claimed_id identity op_endpoint return_to response_nonce assoc_handle assoc_type);
          
          my $arg  = $self->req->params->to_hash;
          my @sign = split(/,/, $self->param('openid.signed'));

          @sign = grep { defined $arg->{'openid.'.$_} && $arg->{'openid.'.$_} ne '' } @sign;

          say Dumper @sign;

          my $token_contents = "";
          foreach my $f (@sign) {
#            $param eq "mode" ? "id_res" : $self->pargs("openid.$param");
            my $val = $f eq 'mode' ? 'id_res' : $arg->{"openid.$f"};
            $token_contents .= "$f:$val\n";
          }

          my $token = hmac_sha1($token_contents, "assoc_handle");

          b64_encode($token);          
          chomp($token);

          my $valid = 0;

          if($token eq $self->param('openid.sig'))
          {
            $valid = 1;
          }
          
          $self->render_text(sprintf('is_valid:%s',($valid ? 'true' : 'false')));
          warn $token_contents;
          #         warn $self->param('openid.sig');
#          warn $valid;

          return;
  }

  if($mode =~ /^checkid_(?:immediate|setup)/)
  {
    my $assoc_type    = $self->param("openid.assoc_type")     || '';
    my $identity   = $self->param("openid.identity");
    my $trust_root = $self->param("openid.trust_root");
    my $return_to = $self->param("openid.return_to");

    my $url = Mojo::URL->new($return_to);

    if($identity =~ m!https?://openid.stejau.de/user/stephantrustall!)
    {
          my %arg = (
                           mode           => "id_res",
                           identity       => $identity,
                           claimed_id     => $identity,
                           return_to      => $url->clone->query(Mojo::Parameters->new)->to_string,
                           assoc_handle   => "assoc_handle",
                           response_nonce => sha1_hex(OpenID::_time_to_w3c(time) . OpenID::_rand_chars(6)),               
                           op_endpoint    => $self->url_for('openid')->to_abs->to_string,
          );

          $arg{'ns'} = $ns if $ns;

          my @sign = qw(mode claimed_id identity op_endpoint return_to response_nonce assoc_handle assoc_type);

          @sign = grep { defined $arg{$_} && $arg{$_} ne '' } @sign;
          $arg{signed} = join(",", @sign);
          my @arg; # arguments we'll append to the URL
          my $token_contents = "";
          foreach my $f (@sign) {
            $token_contents .= "$f:$arg{$f}\n";
            push @arg, "openid.$f" => $arg{$f};
            delete $arg{$f};
          }    

          push @arg, map { ( "openid.$_" => $arg{$_} ) } sort keys %arg;

          my $token;
          $token = hmac_sha1($token_contents, "assoc_handle");
          b64_encode $token;
          chomp($token);
          push @arg, map { ( "openid.$_" => $arg{$_} ) } sort keys %arg;
          push @arg, "openid.sig" => $token;

          my $url2 = $url->clone->query([@arg]);
#          warn $url2;
          $self->redirect_to($url2);
#          warn $token_contents;
          warn join(",", @sign);
          return;
#
#warn Dumper @arg;
    }



    $self->render_text("to be implemented!");
    $self->res->code(400);
    return;
  }

  $self->app->log->debug("-------------------------------------------------");
  $self->response_mode_unknown_error();
} => "openid";

app->helper( response_error => sub
{
  my $self              = shift;
  my $additional_params = shift;

  my $params = Mojo::Parameters->new(%{$additional_params});
  $params->param('ns' => 'http://specs.openid.net/auth/2.0');
  $params->param('openid.ns' => 'Type ');
  $params->param('contact'   => 'info@stephan-jauernick.de');
  $params->param('reference' => 'Mail me!');
 
  my $string = OpenID::hash_to_kv($params->to_hash); 
  $self->app->log->debug(sprintf("Response(Error): %s", $string ));

  $self->res->code(400);
  $self->res->body($string);
  $self->render_text("$string");
  return;
}
);

app->helper( response_associate_type_error => sub 
{
  my $self              = shift;
  my $additional_params = shift;

  $additional_params    = $self->response_associate($additional_params);

  my $params = Mojo::Parameters->new(%{$additional_params});

  $params->param('error'        => 'Type not supported!');
  $params->param('error_code'   => 'unsupported-type');
  $params->param('session_type' => 'DH-SHA256');

  $self->response_error($params->to_hash);
  return;
}
);

app->helper( response_associate => sub
{
  my $self              = shift;
  my $additional_params = shift;

  my $params = Mojo::Parameters->new(%{$additional_params});
  $params->param('assoc_type'   => $self->param("openid.assoc_type"));
  $params->param('session_type' => $self->param("openid.session_type"));
  
  return $params->to_hash;
}
);

app->helper( response_mode_unknown_error => sub
{
  my $self              = shift;
  my $additional_params = shift;

  my $params = Mojo::Parameters->new(%{$additional_params});

  $params->param('error'        => 'Mode not supported!');
  $params->param('error_code'   => 'unsupported-mode');

  $self->response_error($params->to_hash);
  return;
}
);

app->helper( response_success => sub 
{
  my $self              = shift;
  my $additional_params = shift;

  my $params = Mojo::Parameters->new($additional_params);
  $params->param('ns' => 'http://specs.openid.net/auth/2.0');
  $params->param('contact'   => 'info@stephan-jauernick.de');
  $params->param('reference' => 'Mail me!');

  my $string = OpenID::hash_to_kv($params->to_hash);
  $self->app->log->debug(sprintf("Response(Success): %s", $string ));
  $self->res->code(200);
  $self->render_text($string);

  return;
}
);

get '/xrds/(:username)' => sub {
  my $self = shift;
  $self->render(format => 'xml');
} => "xrds";

get '/user/(:username)' => sub {
  my $self = shift;
  $self->render('test');
} => 'user_page';

get '/' => sub {
  my $self = shift;
  $self->render('index');
} => 'index';

app->start;
__DATA__

@@ index.html.ep
% layout 'default';
% title 'Welcome';
Welcome to Mojolicious!


@@ test.html.ep
% layout 'default';
% title 'Test';
OpenID Test for <%= $username %>!

@@ layouts/default.html.ep
<!doctype html><html>
  <head><title>
  	<%= title %></title>
% if( my $username = stash 'username') 
% {
  	<link rel="openid.server"    href="<%= $self->url_for('openid')->to_abs %>" />
	<link rel="openid.delegate"  href="<%= $self->url_for('user_page', { username => $username })->to_abs %>" /> 
	<link rel="openid2.local_id" href="<%= $self->url_for('user_page', { username => $username })->to_abs %>" />
	<link rel="openid2.provider" href="<%= $self->url_for('openid')->to_abs %>" />
	<meta http-equiv="X-XRDS-Location" content="<%= $self->url_for('xrds', { username => $username })->to_abs %>" />
% }
  </head>
  <body><%= content %></body>
</html>
@@ xrds.xml.ep
<?xml version="1.0" encoding="UTF-8"?>
<xrds:XRDS xmlns:xrds="xri://$xrds" xmlns="xri://$xrd*($v*2.0)" xmlns:openid="http://openid.net/xmlns/1.0">
    <XRD>
        <Service>
            <Type>http://specs.openid.net/auth/2.0/signon</Type>
            <URI><%= $self->url_for('openid')->to_abs %></URI>
        </Service>
    </XRD>
</xrds:XRDS>

